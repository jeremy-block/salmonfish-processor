#### Preamble:  Setup & import libraries ####
if(!require("pacman")) install.packages("packman")
pacman::p_load(pacman,tidyverse,tsibble,ggplot2,reshape2,tidylog,hms,lmtest,ggsignif)
##YOU NEED TO UPDATE THIS WITH THE PATH TO THE PARENT FOLDER CONTAINING THIS SCRIPT
setwd("~/Desktop/dataprocessor")
##### Custom Function Declarations ####
# Define functions to handle the export of visualizations
saveVis <- function (name, w = 7, h = 7, writeToDisk = FALSE){
if (writeToDisk){
ggsave(name,
device = "pdf",
plot = last_plot(),
path = paste0(getwd(), "/visualizations"),
scale = 1,
width = w,
height = h,
dpi = 300,
limitsize = TRUE,
units = "in")
} else {
return("Did not save. Provide boolean for variable: `writeToDisk`")
}
}
# Define function for identifying Outliers
is_outlier <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
# define a classification function to return booleans for cases beyond a value (filtering analysis)
is_LsssThan <- function(x,keyValue) {
return (x >= keyValue)
}
##### Define Themes and colors #####
boldTextTheme <- theme(axis.text.x = element_text(face="bold"),
axis.text.y = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
plot.title = element_text(face = "bold"),
plot.background = element_rect(colour = "#353535", size = 1.5)
)
# set colors for factors ###
#google sheets default colors
# my_colors <- c("#4285F4" , "#EA4336", "#FBBC04")            # Create vector of colors (same as used in google)
my_colors <- c("#4FBAAE","#bc4b51","#ffc65c")
# my_colors <- c("#fff7bc" , "#fec44f", "#d95f0e")            # Create vector of colorblind colors
names(my_colors) <- levels(c("Control","Coverage","History")) # Extract all levels of both data
# Specify scale_fill_manual
my_edge_colors <- scale_colour_manual(name = "Condition", values = my_colors)
my_fill_colors <- scale_fill_manual(  name = "Condition", values = my_colors)
#color def for visualizations without control condition.
my_two_colors <- my_colors[2:3] #c( "#EA4336", "#FBBC04")            # Create vector of colors
names(my_two_colors) <- levels(c("Coverage","History")) # Extract all levels of both data
my_two_edge_colors <- scale_colour_manual(  name = "Condition", values = my_two_colors)
my_two_fill_colors <- scale_fill_manual(  name = "Condition", values = my_two_colors)
#### Import Data ##########
# Import Data form interaction logs
df.Participants <- read_csv("data/extracted.csv") %>%
mutate(Condition = as.factor(Condition)) %>%
mutate(Condition = recode_factor(Condition, `1`="Control",`2`='Coverage',`4`='History'))%>%
mutate(grossFilter = `searchCount-Gross` + `AffiliationEvents-Gross`) %>%
mutate(searchRatio = `searchCount-Gross`/grossFilter)
summary(df.Participants)
##### Conclusion Conf. ####
df.Confidence <- read_csv("data/confidence.csv") %>%
melt %>%
rename(Conditions = variable) %>%
rename(Count = value)
summary(df.Confidence)
##### Zhao Strategies #####
df.Strategies <- read_csv(file = "data/Participants-Use for Analysis.csv") %>%
select(userID, Cond, strategy_zhao3) %>%
mutate(Cond = as.factor(Cond)) %>%
mutate(Cond = recode_factor(.x = Cond, `1`="Control",`2`='Coverage',`4`='History')) %>%
mutate(strategy = as.factor(strategy_zhao3)) %>%
group_by(Cond, strategy)
# summarise(counts = n())
summary(df.Strategies)
##### Filtering events as Percent completion Line chart ####
df.Filtering <- read_csv("data/100_affSearch_sum_rel.csv") %>% #can pull form this dataset since it's both searches and affiliation events
mutate(cond=as.factor(cond)) %>% #convert to factor
# cbind("type" = "Search") %>%  Residue from combining with Search and Tool Use
filter(ID != "1e5bbcef") %>% #remove user who did not search
filter(ID != "822b90c6") %>% # remove user who did not search
# select(-total)%>% #remove the column with the total filtering interactions
melt() %>% # make data tall
mutate(cond = recode_factor(cond, `1`="Control",`2`='Coverage',`4`='History')) %>%
mutate(variable = parse_hms(variable)) %>% #convert time columns to hms class.
na.omit()%>% # remove any of the rows for total if needed
filter(as_hms(variable) < 1800) %>% # removing interactions after 30 min.
# filter(as_hms(variable) < 1920) %>% # removing interactions after 32 min.
# mutate(variable = as.datetime(variable,'%m:%s')) #alternative datetime, that we've abandoned.
# mutate(value = value * 100) %>% # multiply the fractional value to make percentage
# filter(value < 100) %>%
mutate(ID=as.factor(ID)) %>% #convert to factor
group_by(ID) %>% #Draw lines according to this group.
mutate(time2 = as.POSIXct(variable, origin = "2021-12-01", tx = "GMT"))
summary(df.Filtering)
##### Conclusion Conf. ####
df.Confidence %>%
ggplot(data=., aes(x=Confidence,y=Count,fill=Conditions))+
my_fill_colors +
geom_bar(position="dodge", stat="identity", col="#353535")+
geom_text(aes(label = Count), position = position_dodge(0.9), vjust = 1.5, colour = "black")+
# ylim(0,12)+
scale_y_continuous(breaks= c(3,6,9,12))+
labs(
title = "Confidience in Conclusion by Condition",
x = "Confidence",
x = NULL,
y="Number of participants"
)+
theme(legend.position="top")+
boldTextTheme
##### Filtering events as Percent completion Line chart ####
df.Filtering <- read_csv("data/100_uniqueDoc_sum_rel.csv") %>% #can pull form this dataset since it's both searches and affiliation events
mutate(cond=as.factor(cond)) %>% #convert to factor
# cbind("type" = "Search") %>%  Residue from combining with Search and Tool Use
filter(ID != "1e5bbcef") %>% #remove user who did not search
filter(ID != "822b90c6") %>% # remove user who did not search
# select(-total)%>% #remove the column with the total filtering interactions
melt() %>% # make data tall
mutate(cond = recode_factor(cond, `1`="Control",`2`='Coverage',`4`='History')) %>%
mutate(variable = parse_hms(variable)) %>% #convert time columns to hms class.
na.omit()%>% # remove any of the rows for total if needed
filter(as_hms(variable) < 1800) %>% # removing interactions after 30 min.
# filter(as_hms(variable) < 1920) %>% # removing interactions after 32 min.
# mutate(variable = as.datetime(variable,'%m:%s')) #alternative datetime, that we've abandoned.
# mutate(value = value * 100) %>% # multiply the fractional value to make percentage
# filter(value < 100) %>%
mutate(ID=as.factor(ID)) %>% #convert to factor
group_by(ID) %>% #Draw lines according to this group.
mutate(time2 = as.POSIXct(variable, origin = "2021-12-01", tx = "GMT"))
df.Filtering %>%
ggplot(data = ., mapping = aes(x=time2, y=value, color= cond)) +
geom_line(mapping=aes(group=df.Filtering$ID, alpha=0.4)) +
geom_smooth(
aes(size = 4),#col = "y ~ log(x)", fill = "y ~ log(x)"),
method = "lm",
formula = y~poly(x, 4),
se = FALSE, # Plot the standard error
level = 0.95,
fullrange = TRUE, # The fit spans the full range of the horizontal axis
show.legend = FALSE
) +
geom_abline(slope = 0,intercept = 0.5, linetype = "dashed")+
# geom_segment(aes(x = hms(724), y = 0.5, xend = hms(1170), yend = 0.5, size = 3), linetype = "dashed",  color="#bfbfbf")+ #"#FFA07A")+
# geom_segment(aes(x = hms(900), y = 0.0, xend = hms(924), yend = 0.5, size = 3), color="#ababab")+ #"#FFA07A")+
# geom_vline(xintercept = hms(924), linetype = "dashed")+
# geom_vline(xintercept = (997), linetype = "dashed")+ #Time when more than 50% of participants had finished half their filters.
# geom_line(mapping=aes(x=variable, y=0.5, size = 2))+
# facet_grid(cond ~.)+
my_edge_colors +
boldTextTheme+
labs(title = "Filtering Interactions Over Time by Condition",
x = "Time",
y = "Percent of Individual's Filtering Behaviors",
caption = "2 participants removed from Control group due to 0 filtering behaviors.") +
guides(
size = "none",
alpha = "none"
)+
scale_y_continuous(labels = scales::percent,
breaks = c(0.0,0.25,0.50,0.75,1.0))+
scale_x_datetime(
date_breaks = "3 min",
date_labels = "%M:%S",
date_minor_breaks = "3 min")+
theme(
# axis.text.x = element_text(angle=90),
# axis.ticks = element_blank(),
# panel.background = element_blank(),
legend.position = c(0.15, 0.85),
legend.background = element_rect(fill = "white"),
)
